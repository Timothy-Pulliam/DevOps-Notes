Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-04-26T14:06:16-04:00

====== Create an IPv4 VPC and Subnets Using the AWS CLI ======
Created Friday 26 April 2019

https://docs.aws.amazon.com/vpc/latest/userguide/vpc-subnets-commands-example.html

'''
aws ec2 create-vpc --cidr-block 10.0.0.0/16
{
    "Vpc": {
        "VpcId": "vpc-2f09a348", 
        ...
    }
}

aws ec2 create-subnet --vpc-id vpc-2f09a348 --cidr-block 10.0.0.0/24
aws ec2 create-subnet --vpc-id vpc-2f09a348 --cidr-block 10.0.1.0/24
'''


# Make Public
'''
aws ec2 create-internet-gateway
{
    "InternetGateway": {
        ...
        "InternetGatewayId": "igw-1ff7a07b", 
        ...
    }
}
'''


''aws ec2 attach-internet-gateway --vpc-id vpc-2f09a348 --internet-gateway-id igw-1ff7a07b''

# Create Route Table
'''
aws ec2 create-route-table --vpc-id vpc-2f09a348
{
    "RouteTable": {
        ... 
        "RouteTableId": "rtb-c1c8faa6", 
        ...
    }
}
'''


'''
aws ec2 create-route --route-table-id rtb-c1c8faa6 --destination-cidr-block 0.0.0.0/0 --gateway-id igw-1ff7a07b
aws ec2 describe-route-tables --route-table-id rtb-c1c8faa6
{
    "RouteTables": [
        {
            "Associations": [], 
            "RouteTableId": "rtb-c1c8faa6", 
            "VpcId": "vpc-2f09a348", 
            "PropagatingVgws": [], 
            "Tags": [], 
            "Routes": [
                {
                    "GatewayId": "local", 
                    "DestinationCidrBlock": "10.0.0.0/16", 
                    "State": "active", 
                    "Origin": "CreateRouteTable"
                }, 
                {
                    "GatewayId": "igw-1ff7a07b", 
                    "DestinationCidrBlock": "0.0.0.0/0", 
                    "State": "active", 
                    "Origin": "CreateRoute"
                }
            ]
        }
    ]
}
'''


Associate Route Table with a subnet in our VPC. In order to do this, we must get the subnet IDs
'''
aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-2f09a348" --query 'Subnets[*].{ID:SubnetId,CIDR:CidrBlock}'
[
'''
	'''
	{
	'''
		'''
		"CIDR": "10.0.1.0/24", 
		"ID": "subnet-b46032ec"
		'''
	'''
	}, 
	{
	'''
		'''
		"CIDR": "10.0.0.0/24", 
		"ID": "subnet-a46032fc"
		'''
	'''
	}
	]
	'''


# This subnet will be the public subnet
''aws ec2 associate-route-table  --subnet-id subnet-b46032ec --route-table-id rtb-c1c8faa6''


You can optionally modify the public IP addressing behavior of your subnet so that an instance launched into the subnet automatically receives a public IP address. Otherwise, you should associate an Elastic IP address with your instance after launch so that it's reachable from the Internet.

''aws ec2 modify-subnet-attribute --subnet-id subnet-b46032ec --map-public-ip-on-launch''

== Launch an Instance into Your Subnet ==

'''
aws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > MyKeyPair.pem
chmod 400 MyKeyPair.pem
'''



Create security group in your VPC to allow ssh access
'''
aws ec2 create-security-group --group-name SSHAccess --description "Security group for SSH access" --vpc-id vpc-2f09a348
{
    "GroupId": "sg-e1fb8c9a"
}
'''


# Allow SSH from any IP address (not in production)
''aws ec2 authorize-security-group-ingress --group-id sg-e1fb8c9a --protocol tcp --port 22 --cidr 0.0.0.0/0''

# Lauch the EC2 instance using security group and subnet ID
''aws ec2 run-instances --image-id ami-a4827dc9 --count 1 --instance-type t2.micro --key-name MyKeyPair --security-group-ids sg-e1fb8c9a --subnet-id subnet-b46032ec''

In this example, the AMI is an Amazon Linux AMI in the US East (N. Virginia) region. If you're in a different region, you'll need the AMI ID for a suitable AMI in your region. You can search for available AMIs using the following CLI examples

https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html#finding-an-ami-aws-cli
display public AMIs owned by Amazon.
'''
aws ec2 describe-images --owners self amazon

'''
You can add the following filter to the previous command to display only AMIs backed by Amazon EBS:
''--filters "Name=root-device-type,Values=ebs"''

Find the current Amazon Linux 2 AMI
''aws ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn2-ami-hvm-2.0.????????-x86_64-gp2' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'''
Find the current Amazon Linux AMI
''aws ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn-ami-hvm-????.??.?.????????-x86_64-gp2' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'''

Find the current Ubuntu Server 16.04 LTS AMI
''aws ec2 describe-images --owners 099720109477 --filters 'Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-????????' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'''

Find the current Red Hat Enterprise Linux 7.5 AMI
''aws ec2 describe-images --owners 309956199498 --filters 'Name=name,Values=RHEL-7.5_HVM_GA*' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'''

Check that the instance is in a running state
'''
aws ec2 describe-instances --instance-id i-0146854b7443af453
{
    "Reservations": [
        {
            ... 
            "Instances": [
                {
                    ...
                    "State": {
                        "Code": 16, 
                        "Name": "running"
                    }, 
                    ...
                    "PublicIpAddress": "52.87.168.235", 
                    ...
                }
            ]
        }
    ]
}
'''


ssh -i "MyKeyPair.pem" ec2-user@52.87.168.235

== Clean up ==

'''
aws ec2 delete-security-group --group-id sg-e1fb8c9a
aws ec2 delete-subnet --subnet-id subnet-b46032ec
aws ec2 delete-subnet --subnet-id subnet-a46032fc
aws ec2 delete-route-table --route-table-id rtb-c1c8faa6
aws ec2 detach-internet-gateway --internet-gateway-id igw-1ff7a07b --vpc-id vpc-2f09a348
aws ec2 delete-internet-gateway --internet-gateway-id igw-1ff7a07b
aws ec2 delete-vpc --vpc-id vpc-2f09a348
'''




