Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-08-19T19:12:36-04:00

====== Docker ======
Created Sunday 19 August 2018

== References ==
https://docs.docker.com/config/daemon/#docker-daemon-directory


==== Debugging Docker ====
Start the docker daemon manually to see error logs in your terminal

'''
root@lappy:~# dockerd
INFO[2018-08-19T19:39:00.127110480-04:00] libcontainerd: started new docker-containerd process  pid=32217
INFO[2018-08-19T19:39:00.127193800-04:00] parsed scheme: "unix"                         module=grpc
INFO[2018-08-19T19:39:00.127206394-04:00] scheme "unix" not registered, fallback to default scheme  module=grpc
INFO[2018-08-19T19:39:00.127241365-04:00] ccResolverWrapper: sending new addresses to cc: [{unix:///var/run/docker/containerd/docker-containerd.sock 0  <nil>}]  module=grpc
INFO[2018-08-19T19:39:00.127256900-04:00] ClientConn switching balancer to "pick_first"  module=grpc
INFO[2018-08-19T19:39:00.127295928-04:00] pickfirstBalancer: HandleSubConnStateChange: 0xc42001a560, CONNECTING  module=grpc
INFO[0000] starting containerd                           revision=d64c661f1d51c48782c9cec8fda7604785f93587 version=v1.1.1
INFO[0000] loading plugin "io.containerd.content.v1.content"...  type=io.containerd.content.v1
INFO[0000] loading plugin "io.containerd.snapshotter.v1.btrfs"...  type=io.containerd.snapshotter.v1
WARN[0000] failed to load plugin io.containerd.snapshotter.v1.btrfs  error="path /var/lib/docker/containerd/daemon/io.containerd.snapshotter.v1.btrfs must be a btrfs filesystem to be used with the btrfs snapshotter"
'''


==== Cheat Sheet ====

https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes

==== image operations ====

== pull image ==
docker pull

== list images (all) ==
docker images -a

== delete images ==
docker rmi <image 1> <image 2> ...
docker images -a | grep "pattern" | awk '{print $3}' | xargs docker rmi

== list and remove dangling (untagged) images ==
docker images -f dangling=true
docker image prune

Note: If you build an image without tagging it, the image will appear on the list of dangling images because it has no association with a tagged image. You can avoid this situation by providing a tag when you build, and you can retroactively tag an images with the docker tag command.


==== Container Operations ====

list containers
docker ps -a

Removing Containers
docker rm <container ID or name> <container ID or name>

Remove stopped / exited containers
docker ps -a -f status=exited
docker container prune
docker rm $(docker ps -a -f status=exited -q)

connect to a running server
docker attach <container name or id>

==== Volume operations ====

list volumes
docker volume ls

remove volume
docker volume rm <volume 1> <volume 2> ...

remove dangling volumes
docker volume ls -f dangling=true
docker volume prune
